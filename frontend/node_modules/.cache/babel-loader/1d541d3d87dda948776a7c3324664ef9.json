{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\ws-devsuperior\\\\projeto-sds3\\\\frontend\\\\src\\\\components\\\\DonutChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { BASE_URl } from \"utils/requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  useEffect(() => {\n    axios.get(BASE_URl + \"/sales/amount-by-seller\").then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n      console.log(chartData);\n    });\n  }, []);\n  const mockData = {\n    series: [477138, 499928, 444867, 220426, 473088],\n    labels: [\"Anakin\", \"Barry Allen\", \"Kal-El\", \"Logan\", \"Padmé\"]\n  };\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels\n    },\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DonutChart, \"52V55kK27yDSu0ikTJDVHsyo2Mg=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["C:/workspaces/ws-devsuperior/projeto-sds3/frontend/src/components/DonutChart/index.tsx"],"names":["axios","useEffect","useState","Chart","BASE_URl","DonutChart","chartData","setChartData","labels","series","get","then","response","data","myLabels","map","x","sellerName","mySeries","sum","console","log","mockData","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAOA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AACpDM,IAAAA,MAAM,EAAE,EAD4C;AAEpDC,IAAAA,MAAM,EAAE;AAF4C,GAAZ,CAA1C;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACdD,IAAAA,KAAK,CAACU,GAAN,CAAUN,QAAQ,GAAG,yBAArB,EAAgDO,IAAhD,CAAsDC,QAAD,IAAc;AACjE,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACC,UAAlB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACG,GAAlB,CAAjB;AAEAZ,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAEM,QAAV;AAAoBL,QAAAA,MAAM,EAAES;AAA5B,OAAD,CAAZ;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACD,KARD;AASD,GAVQ,EAUN,EAVM,CAAT;AAYA,QAAMgB,QAAQ,GAAG;AACfb,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,CADO;AAEfD,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AAFO,GAAjB;AAKA,QAAMe,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE;AADA;AADM,GAAhB;AAMA,sBACE,QAAC,KAAD;AACE,IAAA,OAAO,EAAE,EAAE,GAAGF,OAAL;AAAcf,MAAAA,MAAM,EAAEF,SAAS,CAACE;AAAhC,KADX;AAEE,IAAA,MAAM,EAAEF,SAAS,CAACG,MAFpB;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,MAAM,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CArCD;;GAAMJ,U;;KAAAA,U;AAuCN,eAAeA,UAAf","sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { SaleSum } from \"types/sale\";\r\nimport { BASE_URl } from \"utils/requests\";\r\n\r\ntype ChartData = {\r\n  labels: string[];\r\n  series: number[];\r\n};\r\n\r\nconst DonutChart = () => {\r\n  const [chartData, setChartData] = useState<ChartData>({\r\n    labels: [],\r\n    series: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios.get(BASE_URl + \"/sales/amount-by-seller\").then((response) => {\r\n      const data = response.data as SaleSum[];\r\n      const myLabels = data.map((x) => x.sellerName);\r\n      const mySeries = data.map((x) => x.sum);\r\n\r\n      setChartData({ labels: myLabels, series: mySeries });\r\n\r\n      console.log(chartData);\r\n    });\r\n  }, []);\r\n\r\n  const mockData = {\r\n    series: [477138, 499928, 444867, 220426, 473088],\r\n    labels: [\"Anakin\", \"Barry Allen\", \"Kal-El\", \"Logan\", \"Padmé\"],\r\n  };\r\n\r\n  const options = {\r\n    legend: {\r\n      show: true,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Chart\r\n      options={{ ...options, labels: chartData.labels }}\r\n      series={chartData.series}\r\n      type=\"donut\"\r\n      height=\"240\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DonutChart;\r\n"]},"metadata":{},"sourceType":"module"}