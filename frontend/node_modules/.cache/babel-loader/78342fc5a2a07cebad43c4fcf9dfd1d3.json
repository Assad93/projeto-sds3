{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\ws-devsuperior\\\\projeto-sds3\\\\frontend\\\\src\\\\components\\\\DonutChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { BASE_URl } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  useEffect(() => {\n    axios.get(BASE_URl + '/sales/amount-by-seller').then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n      console.log(chartData);\n    });\n  }, []);\n  const mockData = {\n    series: [477138, 499928, 444867, 220426, 473088],\n    labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n  };\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels\n    },\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DonutChart, \"aUQ8RMGL8CCZbUkZS1EfKr7vfts=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["C:/workspaces/ws-devsuperior/projeto-sds3/frontend/src/components/DonutChart/index.tsx"],"names":["axios","useEffect","useState","Chart","BASE_URl","DonutChart","chartData","setChartData","labels","series","get","then","response","data","myLabels","map","x","sellerName","mySeries","sum","console","log","mockData","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAOA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AAAEM,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAZ,CAA1C;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZD,IAAAA,KAAK,CAACU,GAAN,CAAUN,QAAQ,GAAG,yBAArB,EACCO,IADD,CACOC,QAAD,IAAc;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAZ,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAEM,QAAV;AAAoBL,QAAAA,MAAM,EAAES;AAA5B,OAAD,CAAZ;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACH,KATD;AAUH,GAXQ,EAWP,EAXO,CAAT;AAeA,QAAMgB,QAAQ,GAAG;AACbb,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,CADK;AAEbD,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AAFK,GAAjB;AAKA,QAAMe,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAE;AADF;AADI,GAAhB;AAMA,sBACI,QAAC,KAAD;AACA,IAAA,OAAO,EAAE,EAAC,GAAGF,OAAJ;AAAaf,MAAAA,MAAM,EAAEF,SAAS,CAACE;AAA/B,KADT;AAEA,IAAA,MAAM,EAAEF,SAAS,CAACG,MAFlB;AAGA,IAAA,IAAI,EAAC,OAHL;AAIA,IAAA,MAAM,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAtCD;;GAAMJ,U;;KAAAA,U;AAwCN,eAAeA,UAAf","sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { SaleSum } from 'types/sale';\r\nimport { BASE_URl } from 'utils/requests';\r\n\r\ntype ChartData = {\r\n    labels: string[],\r\n    series: number[]\r\n}\r\n\r\nconst DonutChart = () => {\r\n\r\n    const [chartData, setChartData] = useState<ChartData>({ labels: [], series: [] });\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URl + '/sales/amount-by-seller')\r\n        .then((response) => {\r\n            const data = response.data as SaleSum[];\r\n            const myLabels = data.map(x => x.sellerName);\r\n            const mySeries = data.map(x => x.sum);\r\n\r\n            setChartData({ labels: myLabels, series: mySeries });\r\n\r\n            console.log(chartData);\r\n        });\r\n    },[])\r\n\r\n    \r\n\r\n    const mockData = {\r\n        series: [477138, 499928, 444867, 220426, 473088],\r\n        labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\r\n    }\r\n    \r\n    const options = {\r\n        legend: {\r\n            show: true\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Chart \r\n        options={{...options, labels: chartData.labels}}\r\n        series={chartData.series}\r\n        type=\"donut\"\r\n        height=\"240\"\r\n    />\r\n    );\r\n}\r\n\r\nexport default DonutChart;"]},"metadata":{},"sourceType":"module"}